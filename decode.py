#!/usr/bin/env python3
from typing import List
import os
import sys

VALID1 = [0, 86, 1, 32, 1, 3, 0, 0, 11, 0, 7, 4, 36, 150]
VALID2 = [32, 1, 86, 1, 14, 0, 0, 6, 0, 7, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 108]


from numpy.ma.core import nonzero
from sympy.codegen.ast import continue_

HEX_BYTES = "00560120010300000b0007042496200156010e0000060007040000000000000000000000556c560120010300000b0007042496200156010e000006000704000000000000000000000000556c420120010300000b00030da7a0200142010a00000600030d00000000000000ea20420120010300000b00010466c620014201007b0000060001045641524941424c452053504545442046414e20434f494c2000000000000000000000000000000000000000000000000043455352313331003332392d3231202000464534424e424436304c30304541414100000000333332334d30343434373520313032344630353932320000000000000000000000000000004ea756012081560120010300000b0007042496200156010e0000060007040000000000000000000000556c420120010300000b00030da7a0200142010a00000600030d00000000000000ea20560120010600000c000610000000714b20015601010000060051b9560120010d00000c00061222b80000000000000000e09120015601010000060051b9560120010a00000c0006050000000000000167d520015601010000060051b9560120010b00000c00062d01000000000000006bb720015601010000060051b9560120011000000c00060d0200000000000000000000000041b720015601010000060051b9560120010c00000c00061e0f000000000600000008c520015601010000060051b9560120010a00000c00060b01041300000000b31e20015601010000060051b9560120010300000b0007042496200156010e0000060007040000000000000000000000556c560120010300000b000302a654200156013b00000600030201110236011201d8015401e8014a0118014a3d75014507f60000000000000000045502f0000000000000000000000000015b01d6015c041f895c560120010300000b0003036794200156010b0000060003030130060401520bca44c8420120010300000b000306e667200142010d0000060003060101f70000000008660017b4420120010300000b00030727a720014201060000060003070100004dce420120010300000b000424644e2001420107000006000424003f0000ff49560120010300000b000604250620015601110000060006040000000000000f3c06e411940d5c9da4560120010300000b0006082503200156010c00000600060800000001000000000088e3560120010300000b00061f650d200156015500000600061f00418200000000000000000000411ef61e000000003d19999a030607090000000000000000000000000100000000000000000000000000000000000000000708000000000000000000000000000000000000bec9560120010300000b0007042496200156010e0000060007040000000000000000000000556c420120010300000b00030da7a0200142010a00000600030d00000000000000ea20420120010300000b00010466c6200142017b0000060001045641524941424c452053504545442046414e20434f494c20000000000000000000000000000000000000000000000000434553523133313332392d3231202000464534424e424436304c30304541414100000000333332334d303434343735203130323446303539323200000000000000000000000000004ea7560120010300000b00030aa792200156011100000600030a032727020220003c000100000000ad99560120010300000b00060aa4c2200156017500000600060a4852343656523030320000000000000041303336000000000000000000000000b0020000199f0b3f199f0b3f0cb02cff17ff000000000000000000000000000000000000000000000004b003ee00000000000000000000000000000000000000000014740eae000000000000000002f802fcff67560120010300000b000702a494200156012300000600070243455352313331363630000101010168434553523133313733300001010102d0b081420120010300000b000405a456200142010c000006000405001007036b01fb0af3325a560120010300000b0007042496200156010e0000060007040000000000000000000000556c560120010300000b0007042496200156010e0000060007040000000000000000000000556c420120010300000b00030da7a0200142010a00000600030d00000000000000ea20560120010300000b000304265620015601130000060003040118003c011700f300000000014400006e64560120010300000b00030de650200156011100000600030d0000000000000001010101010101a706420120010300000b000316e7ab200142011200000600031600000000036b0233300001000000005718420120010300000b000402e594200142011d0000060004021d3593c0eb1d341d5a881db45b05521d0000000003b104b10546c2ea560120010300000b000606a4c72001560123000006000606462b7800475f4c00462b78004779dc0047353200000000003f8000004000000094f7560120010300000b00060765072001560123000006000607060a0854030004e2030004e2030004e205f507d005f507d0028a06d6028a06d6e6a8560120010300000b000316a65b200156013b000006000316000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001000000000077c5560120010300000b0007042496200156010e0000060007040000000000000000000000556c420120010300000b00010466c6200142017b0000060001045641524941424c452053504545442046414e20434f494c20000000000000000000000000000000000000000000000000434553523133313332392d3231202000464534424e424436304c30304541414100000000333332334d303434343735203130323446303539323200000000000000000000000000004ea7560120010300000b00030aa792200156011100000600030a032727020220003c000100000000ad99560120010300000b00060aa4c2200156017500000600060a4852343656523030320000000000000041303336000000000000000000000000b0020000199f0b3f199f0b3f0cb02cff17ff000000000000000000000000000000000000000000000004b003ee00000000000000000000000000000000000000000014760eaf000000000000000002f802fc7fe7560120010300000b000702a494200156012300000600070243455352313331363630000101010168434553523133313733300001010102d0b081420120010f00000c00030500000000036b000000000000a0f020014201010000060005b8420120010700000c00030701000000ee7d20014201010000060005b8560120010300000b0007042496200156010e0000060007040000000000000000000000556c420120010300000b00030da7a0200142010a00000600030d00000000000000ea20560120010300000b000302a654200156013b00000600030201110236011201d9015401e9014a00f9014a3d25014507f20000000000000000045502f0000000000000000000000000015b01d9015c041fae3a560120010300000b0003036794200156010b0000060003030130060701520bca00c8420120010300000b000306e667200142010d0000060003060101fb0000000008660017e1420120010300000b00030727a720014201060000060003070100004dce420120010300000b000424644e2001420107000006000424003f0000ff49560120010300000b000604250620015601110000060006040000000000000f3c06e411940d5c9da4560120010300000b0006082503200156010c00000600060800000001000000000088e3560120010300000b00061f650d200156015500000600061f00418200000000000000000000411ef61e000000003d19999a030607090000000000000000000000000100000000000000000000000000000000000000000708000000000000000000000000000000000000bec9420120010300000b000302e7a4200142010f00000600030204110000041c00000413000047e0560120011600000c00071600000000036b11010413040000040000012800935d20015601010000060051b9560120010300000b0007042496200156010e0000060007040000000000000000000000556c560120010300000b000602a504200156011000000600060253001380f3ff00aa00010001008dae560120010300000b0007042496200156010e0000060007040000000000000000000000556c420120010300000b00030da7a0200142010a00000600030d00000000000000ea20420120010300000b00010466c6200142017b0000060001045641524941424c452053504545442046414e20434f494c20000000000000000000000000000000000000000000000000434553523133313332392d3231202000464534424e424436304c30304541414100000000333332334d303434343735203130323446303539323200000000000000000000000000004ea7560120010300000b00030aa792200156011100000600030a032727020220003c000100000000ad99560120010300000b00060aa4c2200156017500000600060a4852343656523030320000000000000041303336000000000000000000000000b0020000199f0b3f199f0b3f0cb02cff17ff000000000000000000000000000000000000000000000004b003ed000000000000000000000000000000000000000000147a0eaf000000000000000002f802fcc3f8560120010300000b000702a494200156012300000600070243455352313331363630000101010168434553523133313733300001010102d0b081560120010300000b0007042496200156010e0000060007040000000000000000000000556c420120010300000b000405a456200142010c000006000405001007036b01f90af79259560120010300000b0007042496200156010e0000060007040000000000000000000000556c420120010300000b00030da7a0200142010a00000600030d00000000000000ea20560120010600000c000610000000714b20015601010000060051b9560120010d00000c00061222b80000000000000000e09120015601010000060051b9560120010a00000c0006050000000000000167d520015601010000060051b9560120010b00000c00062d01000000000000006bb720015601010000060051b9560120011000000c00060d0200000000000000000000000041b720015601010000060051b9560120010c00000c00061e0f000000000600000008c520015601010000060051b9560120010300000b0007042496200156010e0000060007040000000000000000000000556c420120010300000b00010466c6200142017b0000060001045641524941424c452053504545442046414e20434f494c20000000000000000000000000000000000000000000000000434553523133313332392d3231202000464534424e424436304c30304541414100000000333332334d303434343735203130323446303539323200000000000000000000000000004ea7560120010300000b00030aa792200156011100000600030a032727020220003c000100000000ad99560120010300000b00060aa4c2200156017500000600060a4852343656523030320000000000000041303336000000000000000000000000b0020000199f0b3f199f0b3f0cb02cff17ff000000000000000000000000000000000000000000000004b003ed000000000000000000000000000000000000000000147c0eb1000000000000000002f802fc6de4560120010300000b000702a494200156012300000600070243455352313331363630000101010168434553523133313733300001010102d0b081560120010300000b000302a654200156013b00000600030201110236011201da015401ea014a00f9014a3d04014507ed0000000000000000045502f0000000000000000000000000015b01d9015c041debea560120010300000b0003036794200156010b0000060003030130060701520bc4810c420120010300000b000306e667200142010d0000060003060101fa00000000086600d62d420120010300000b00030727a720014201060000060003070100004dce420120010300000b000424644e2001420107000006000424003f0000ff49560120010300000b000604250620015601110000060006040000000000000f3c06e411940d5c9da4560120010300000b0006082503200156010c00000600060800000001000000000088e3560120010300000b00061f650d200156015500000600061f00418200000000000000000000411ef61e000000003d19999a030607090000000000000000000000000100000000000000000000000000000000000000000708000000000000000000000000000000000000bec9560120010300000b0007042496200156010e0000060007040000000000000000000000556c420120010300000b00030da7a0200142010a00000600030d00000000000000ea20560120010300000b0007042496200156010e0000060007040000000000000000000000556c560120010300000b0007042496200156010e0000060007040000000000000000000000556c420120010300000b00030da7a0200142010a00000600030d00000000000000ea20420120010300000b00010466c6200142017b0000060001045641524941424c452053504545442046414e20434f494c20000000000000000000000000000000000000000000000000434553523133313332392d3231202000464534424e424436304c30304541414100000000333332334d303434343735203130323446303539323200000000000000000000000000004ea7560120010300000b00030aa792200156011100000600030a032727020220003c000100000000ad99560120010300000b00060aa4c2200156017500000600060a4852343656523030320000000000000041303336000000000000000000000000b0020000199f0b3f199f0b3f0cb02cff17ff000000000000000000000000000000000000000000000004b003ed000000000000000000000000000000000000000000147a0eae000000000000000002f802fcc179560120010300000b000702a494200156012300000600070243455352313331363630000101010168434553523133313733300001010102d0b081560120010300000b0007042496200156010e0000060007040000000000000000000000556c560120010300000b000304265620015601130000060003040118003c011700f300000000014400006e64560120010300000b00030de650200156011100000600030d0000000000000001010101010101a706420120010300000b000316e7ab200142011200000600031600000000036b02334300010000000015df420120010300000b000402e594200142011d0000060004021d3593c0eb1d341d5a881db45b05521d0000000003b104b10546c2ea560120010300000b000606a4c72001560123000006000606462b7800475f4c00462b78004779dc0047353200000000003f8000004000000094f7560120010300000b00060765072001560123000006000607060a0854030004e2030004e2030004e205f507d005f507d0028a06d6028a06d6e6a8420120010f00000c00030500000000036b000000000000a0f020014201010000060005b8420120010700000c00030701000000ee7d20014201010000060005b8"

RAW_BYTES = bytes.fromhex(HEX_BYTES)

byteList = [x for x in RAW_BYTES]


def checksum(data: bytes) -> int:
    """
    Compute CRC16/ARC for the input data.

    CRC16/ARC parameters:
      - Width: 16 bits
      - Polynomial: 0x8005 (reflected: 0xA001)
      - Initial value: 0x0000
      - Reflect input: True
      - Reflect output: True
      - Final XOR value: 0x0000

    Args:
        data (bytes): Data for which to compute the CRC.

    Returns:
        int: The computed CRC16/ARC value.
    """
    crc = 0x0000
    for byte in data:
        crc ^= byte  # XOR byte into the low order byte of crc
        for _ in range(8):
            # If LSB is set, shift right and XOR with polynomial 0xA001.
            if crc & 1:
                crc = (crc >> 1) ^ 0xA001
            else:
                crc >>= 1
    return crc


def decode(buf: List[int]):
    nonZero = False
    loc = 0

    while loc < len(buf):
        if buf[loc] != 0:
            nonZero = True
            break
        loc += 1

    if not nonZero:
        return False, None

    newBuf = buf[loc:]

    l = len(newBuf) - 2

    chsumbytes = newBuf[:l]

    cksum = checksum(chsumbytes)

    chksum1 = newBuf[l]
    chksum2 = newBuf[l+1]

    ingestedChecksum = (chksum2 << 8) + chksum1

    print(hex(cksum), hex(ingestedChecksum), chksum1, chksum2, chsumbytes)

    if cksum != ingestedChecksum:
        return False, None

    return True, newBuf[:l]


# func (f *Frame) decode(buf []byte) bool {
# 	nonzero := false
# 	for _, c := range buf {
# 		if c != 0 {
# 			nonzero = true
# 			break
# 		}
# 	}
# 	if !nonzero {
# 		return false
# 	}
#
# 	l := len(buf) - 2
#
# 	cksum := checksum(buf[:l])
# 	if !bytes.Equal(cksum, buf[l:]) {
# 		return false
# 	}
#
# 	f.dst = binary.BigEndian.Uint16(buf[0:2])
# 	f.src = binary.BigEndian.Uint16(buf[2:4])
# 	f.dataLen = buf[4]
# 	// Not sure what bytes 5 and 6 are
# 	f.op = buf[7]
# 	f.data = append([]byte{}, buf[8:l]...)
#
# 	return true
# }


def find_frames(inBuf: List[int]):
    start = 0

    inBufLen = len(inBuf)
    buf = inBuf

    while inBufLen - start > 10:
        buf = inBuf[start:]

        frameLength = buf[4] + 10
        if len(buf) < frameLength:
            start += 1
            continue

        possibleFrame = buf[:frameLength]

        success, the_frame = decode(possibleFrame)

        print("success", success, start, inBufLen-start)

        if not success:
            start+=1
            continue

        return True, the_frame, buf[frameLength:]

    return False, [], buf


#print(decode(VALID1))
#print(decode(VALID2))

newByteList = byteList
while len(newByteList) > 10:
    found, frame, newByteList = find_frames(newByteList)
    print(found, frame, newByteList)


